TODO-Liste:
+  Secure Channel:
  + Client Behaviour:
    + !authenticate-Message akzeptieren und verarbeiten.
    + Public Key vom Controller laden (util.keys verwenden).
    + Private Key laden (util.keys verwenden).
    + Bei nicht-existieren Fehlermeldung.
    + Aufpassen, dass sonst keine Commands erlaubt sind.
	+ AESChannel in Client öffnen
    + Authentication-Challenge verschicken.
    + Vermeiden, dass man sich öfters als 1 mal authentifiziert.
    + !login ist nicht mehr gefordert.
    + Fehlerhaftes Protokoll abfangen (Falsche Parameter in Messages)
	+ An SecureChannel einen Base64-Channel übergeben
  + Cloud Controller Behaviour:
    + Private Key beim Starten einlesen
    + Bei Eintreffen eines Requests:
    + Nur RSA verschlüsselte Requests sind erlaubt (Annahme, gibt es dazu einen Foreneintrag?).
    + public Key des entsprechenden Users laden.
    + User ist erst online, wenn die Authentifizierung abgeschlossen ist.
	+ Aufpassen, falls nicht-verschlüsselte Messages kommen.
    + Aufpassen, falls mitten in der Session nicht-verschlüsselte Messages kommen.
	+ An SecureChannel einen Base64-Channel übergeben
	- Fehlermeldungen ausgeben, wenn bei der Authentifizierun was schief gegangen ist. Nicht einfach den Socket closen.
	+ Commands vom CloudController durchgehen und anpassen.
	+ Was tun, wenn die erste oder dritte Nachricht vom Client ungültig ist? Derzeit wird null zurückgegeben. Besser machen!
  + Authentication Algorithm:
    + Message-Austausch wie in der Angabe beschrieben:
    + 1. RSA-verschlüsseltes !authenticate
    + Challenge base64-encoden, dann RSA-encrypten, dann nochmal base64-encoden
    + 2. RSA-verschlüsseltes !ok
    + Alle Argumente einzeln base64-encoden, dann konkatenieren und RSA-verschlüsseln, dann nochmal base64-encoden
    + 3. AES-verschlüsselte Challenge-Antwort
    + AES initialisieren, Challenge wieder base64-encoden, dann AES-verschlüsseln, dann nochmal base64-encoden
    + User ist nun online
    + Achtung bei garbled/unencrypted messages
	+ TODOs abarbeiten